<?xml version="1.0" encoding="UTF-8" ?>
<pbj-schema xmlns="http://gdbots.io/pbj/xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://gdbots.io/pbj/xsd http://gdbots.io/pbj/xsd/schema.xsd">

  <schema id="pbj:gdbots:pbjx:mixin:command:1-0-0" mixin="true">
    <fields>
      <field name="stream_id" type="identifier" overridable="true">
        <description>
          The "stream_id" can be used to provide sequential ordering of messages.
          It is still up to the transports and consumers to handle the ordering and
          the sequence can only be reliable within the stream_id.
        </description>
        <php-options>
          <classname>Gdbots\Schemas\Pbjx\StreamId</classname>
        </php-options>
      </field>
      <field name="event_id" type="time-uuid" required="true"/>
      <field name="occurred_at" type="microtime" required="true"/>
      <field name="ctx_causator_ref" type="message-ref"/>
      <field name="ctx_correlator_ref" type="message-ref"/>
      <field name="ctx_user_ref" type="message-ref"/>
      <field name="ctx_app" type="message">
        <description>
          The "ctx_app" refers to the application used to send the command which
          in turn resulted in this event being published.
        </description>
        <any-of>
          <curie>gdbots:contexts::app</curie>
        </any-of>
      </field>
      <field name="ctx_ip" type="string" format="ipv4" overridable="true"/>
      <field name="ctx_ua" type="text" overridable="true"/>
    </fields>

    <php-options>
      <namespace>Gdbots\Schemas\Pbjx\Event</namespace>
      <insertion-points>
        <imports>
          <![CDATA[
use Gdbots\Pbj\MessageRef;
            ]]>
        </imports>
        <methods>
          <![CDATA[
/**
 * @param string $tag
 * @return MessageRef
 */
public function generateMessageRef($tag = null)
{
    return new MessageRef(static::schema()->getCurie(), $this->get('event_id'), $tag);
}

/**
 * @return array
 */
public function getUriTemplateVars()
{
    return [
        'stream_id' => (string)$this->get('stream_id'),
        'event_id' => (string)$this->get('event_id'),
        'occurred_at' => (string)$this->get('occurred_at'),
        'ctx_user_ref' => (string)$this->get('ctx_user_ref'),
    ];
}
            ]]>
        </methods>
      </insertion-points>
    </php-options>
  </schema>
</pbj-schema>
